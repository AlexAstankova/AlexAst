import { useState } from 'react'
import { Mail, Phone, User } from 'lucide-react'

export default function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: '',
    type: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
  })
  const [agreed, setAgreed] = useState(false)
  const [loading, setLoading] = useState(false)
  const [submitted, setSubmitted] = useState(false)
  const [error, setError] = useState('')

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      // Telegram Bot Configuration
      const TELEGRAM_BOT_TOKEN = '8206709234:AAG6hRYX1C2dcGLJanQo_wJbrl_tatETddQ'
      const TELEGRAM_GROUP_ID = '-1002985302779'

      // Format message for Telegram
      const telegramMessage = `
üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>

üë§ <b>–ò–º—è:</b> ${formData.name}
üìß <b>Email:</b> ${formData.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
${formData.type ? `üìå <b>–¢–∏–ø —É—Å–ª—É–≥–∏:</b> ${formData.type}` : ''}
${formData.message ? `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${formData.message}` : ''}

‚è∞ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
      `

      // Send to Telegram
      const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
      
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_GROUP_ID,
          text: telegramMessage,
          parse_mode: 'HTML'
        })
      })

      if (response.ok) {
        setSubmitted(true)
        setFormData({
          name: '',
          email: '',
          phone: '',
          message: '',
          type: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        })
        setAgreed(false)
        // Reset success message after 5 seconds
        setTimeout(() => setSubmitted(false), 5000)
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.')
      console.error('Form submission error:', err)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="w-full max-w-md mx-auto">
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Name */}
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
            –í–∞—à–µ –∏–º—è *
          </label>
          <div className="relative">
            <User className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2B59C3] focus:border-transparent outline-none text-black placeholder:text-gray-500"
              placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
            />
          </div>
        </div>

        {/* Email */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
            Email *
          </label>
          <div className="relative">
            <Mail className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2B59C3] focus:border-transparent outline-none text-black placeholder:text-gray-500"
              placeholder="ivan@example.com"
            />
          </div>
        </div>

        {/* Phone */}
        <div>
          <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
            –¢–µ–ª–µ—Ñ–æ–Ω *
          </label>
          <div className="relative">
            <Phone className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2B59C3] focus:border-transparent outline-none text-black placeholder:text-gray-500"
              placeholder="+7 (999) 123-45-67"
            />
          </div>
        </div>

        {/* Service Type */}
        <div>
          <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
            –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è —É—Å–ª—É–≥–∞
          </label>
          <select
            id="type"
            name="type"
            value={formData.type}
            onChange={handleChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2B59C3] focus:border-transparent outline-none text-black"
          >
            <option>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</option>
            <option>–£—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä–µ</option>
            <option>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂</option>
            <option>–û–±—É—á–µ–Ω–∏–µ</option>
            <option>–î—Ä—É–≥–æ–µ</option>
          </select>
        </div>

        {/* Message */}
        <div>
          <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
            –°–æ–æ–±—â–µ–Ω–∏–µ
          </label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleChange}
            rows="3"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#2B59C3] focus:border-transparent outline-none resize-none text-black placeholder:text-gray-500"
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏..."
          />
        </div>

        {/* Error Message */}
        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
            {error}
          </div>
        )}

        {/* Success Message */}
        {submitted && (
          <div className="p-3 bg-green-50 border border-green-200 rounded-lg text-green-700 text-sm">
            ‚úì –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
          </div>
        )}

        {/* Privacy Agreement */}
        <div className="flex items-start space-x-2">
          <input
            type="checkbox"
            id="privacy"
            checked={agreed}
            onChange={(e) => setAgreed(e.target.checked)}
            className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
          />
          <label htmlFor="privacy" className="text-sm text-gray-600">
            –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </label>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          disabled={loading || !agreed}
          className="w-full bg-[#2B59C3] hover:bg-blue-700 text-white font-semibold py-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
        </button>

        <p className="text-xs text-gray-500 text-center">
          * –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        </p>
      </form>
    </div>
  )
}

